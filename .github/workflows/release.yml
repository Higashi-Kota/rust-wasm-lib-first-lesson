name: 🚀 Release & Deploy

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release (e.g., 1.0.0)"
        required: true
        type: string
      prerelease:
        description: "Mark as pre-release"
        required: false
        type: boolean
        default: false
      publish_npm:
        description: "Publish to npm"
        required: false
        type: boolean
        default: true

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  NODE_VERSION: "22.11.0"
  PNPM_VERSION: "10.11.0"

jobs:
  # Version validation and setup
  validate:
    name: 🔍 Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
      should_publish_npm: ${{ steps.flags.outputs.should_publish_npm }}

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🏷️ Extract version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
            IS_PRERELEASE="${{ github.event.inputs.prerelease }}"
          else
            VERSION=${GITHUB_REF#refs/tags/v}
            if [[ "$VERSION" == *"-"* ]]; then
              IS_PRERELEASE=true
            else
              IS_PRERELEASE=false
            fi
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          echo "Version: $VERSION (pre-release: $IS_PRERELEASE)"

      - name: 🚩 Set release flags
        id: flags
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "should_publish_npm=${{ github.event.inputs.publish_npm }}" >> $GITHUB_OUTPUT
          else
            echo "should_publish_npm=true" >> $GITHUB_OUTPUT
          fi

      - name: 📋 Validate version format
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if ! echo "$VERSION" | grep -qE '^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$'; then
            echo "❌ Invalid version format: $VERSION"
            echo "Expected format: x.y.z or x.y.z-suffix"
            exit 1
          fi
          echo "✅ Version format is valid: $VERSION"

  # Build and test everything ONCE
  build:
    name: 🏗️ Build & Test All
    runs-on: ubuntu-latest
    needs: validate
    timeout-minutes: 25

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🦀 Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
          targets: wasm32-unknown-unknown

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📦 Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      - name: 🧪 Run full test suite
        run: |
          # Rust tests
          cargo test --workspace --verbose --locked

          # Build WASM (リリース最適化)
          wasm-pack build packages/crates/gnrng-id --target web --scope nap5 --release

          # Install Node.js dependencies
          pnpm install --frozen-lockfile --shamefully-hoist

          # Build packages
          pnpm --filter @internal/utils build
          pnpm --filter @nap5/gnrng-id build:lib

          # TypeScript tests
          pnpm --filter @internal/utils test:run
          pnpm --filter @nap5/gnrng-id test:run
          pnpm --filter app test:run

          # Benchmarks
          pnpm --filter @nap5/gnrng-id benchmark

      - name: 🏗️ Build demo app
        run: pnpm --filter app build

      - name: 📦 Package build artifacts for publishing
        run: |
          # 必要なファイルのみを整理してパッケージング
          mkdir -p build-artifacts

          # WASM artifacts (packages/crates/gnrng-id/pkg/)
          mkdir -p build-artifacts/wasm-pkg
          cp -r packages/crates/gnrng-id/pkg/* build-artifacts/wasm-pkg/

          # TypeScript build artifacts (packages/lib/dist/)
          mkdir -p build-artifacts/lib-dist  
          cp -r packages/lib/dist/* build-artifacts/lib-dist/

          # WASM package config files
          cp packages/crates/gnrng-id/package.json build-artifacts/wasm-package.json
          cp packages/crates/gnrng-id/README.md build-artifacts/wasm-README.md
          cp LICENSE build-artifacts/wasm-LICENSE

          # Library package config files
          cp packages/lib/package.json build-artifacts/lib-package.json
          cp packages/lib/README.md build-artifacts/lib-README.md
          cp packages/lib/LICENSE build-artifacts/lib-LICENSE

          # Verification
          echo "📋 Build artifacts contents:"
          find build-artifacts -type f | head -20

          echo "📋 WASM pkg contents:"
          ls -la build-artifacts/wasm-pkg/

          echo "📋 TypeScript dist contents:"
          ls -la build-artifacts/lib-dist/

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: build-artifacts/
          retention-days: 1

  # Publish WASM package to npm (1st stage)
  publish-wasm-npm:
    name: 📦 Publish WASM to npm
    runs-on: ubuntu-latest
    needs: [validate, build]
    if: needs.validate.outputs.should_publish_npm == 'true'
    environment: npm-publish
    timeout-minutes: 10

    steps:
      - name: 📥 Checkout (for structure)
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: "https://registry.npmjs.org"

      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: build-artifacts/

      - name: 📦 Restore WASM package structure for npm
        run: |
          # WASM ディレクトリ構造を再構築
          mkdir -p packages/crates/gnrng-id/pkg

          # Build artifacts を正しい場所に配置
          cp -r build-artifacts/wasm-pkg/* packages/crates/gnrng-id/pkg/
          cp build-artifacts/wasm-package.json packages/crates/gnrng-id/package.json
          cp build-artifacts/wasm-README.md packages/crates/gnrng-id/README.md
          cp build-artifacts/wasm-LICENSE packages/crates/gnrng-id/LICENSE

          # Verification
          echo "📋 Restored WASM package structure:"
          ls -la packages/crates/gnrng-id/
          ls -la packages/crates/gnrng-id/pkg/

      - name: 📦 Update WASM package version
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          cd packages/crates/gnrng-id

          echo "📋 Original WASM package.json:"
          cat package.json | jq '.'

          # Update package version using jq
          echo "Updating WASM package.json version to $VERSION..."
          jq --arg version "$VERSION" '.version = $version' package.json > package.json.tmp
          mv package.json.tmp package.json

          echo "✅ Updated WASM package.json version:"
          jq -r '.version' package.json

      - name: 🔍 Verify WASM package contents for npm
        run: |
          cd packages/crates/gnrng-id
          echo "📋 Final WASM package contents:"
          ls -la
          echo "📋 Pkg contents:"
          ls -la pkg/
          echo "📋 Package.json version:"
          node -p "require('./package.json').version"

          # npm pack のドライラン
          npm pack --dry-run

      - name: 🚀 Publish WASM to npm
        run: |
          cd packages/crates/gnrng-id
          if [ "${{ needs.validate.outputs.is_prerelease }}" = "true" ]; then
            # prepublishOnlyをスキップしてpublish（CI環境では既にビルド・テスト済み）
            npm publish --access public --tag beta --ignore-scripts
            echo "✅ Published WASM pre-release to npm with 'beta' tag"
          else
            npm publish --access public --ignore-scripts
            echo "✅ Published WASM stable release to npm"
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  # Publish library package to npm (2nd stage)
  publish-lib-npm:
    name: 📦 Publish Library to npm
    runs-on: ubuntu-latest
    needs: [validate, build, publish-wasm-npm]
    if: always() && needs.validate.outputs.should_publish_npm == 'true' && (needs.publish-wasm-npm.result == 'success' || needs.publish-wasm-npm.result == 'skipped')
    environment: npm-publish
    timeout-minutes: 10

    steps:
      - name: 📥 Checkout (for structure)
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: "https://registry.npmjs.org"

      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: build-artifacts/

      - name: 📦 Restore library package structure for npm
        run: |
          # lib ディレクトリ構造を再構築
          mkdir -p packages/lib/dist

          # Build artifacts を正しい場所に配置
          cp -r build-artifacts/lib-dist/* packages/lib/dist/
          cp build-artifacts/lib-package.json packages/lib/package.json
          cp build-artifacts/lib-README.md packages/lib/README.md
          cp build-artifacts/lib-LICENSE packages/lib/LICENSE

          # Verification
          echo "📋 Restored library package structure:"
          ls -la packages/lib/
          ls -la packages/lib/dist/

      - name: 📦 Update library package version and dependencies
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          cd packages/lib

          echo "📋 Original library package.json:"
          cat package.json | jq '.'

          # Update package version using jq
          echo "Updating library package.json version to $VERSION..."
          jq --arg version "$VERSION" '.version = $version' package.json > package.json.tmp
          mv package.json.tmp package.json

          # Update WASM dependency version to the same version
          echo "Updating WASM dependency version to $VERSION..."
          jq --arg version "$VERSION" '.dependencies."@nap5/gnrng-id-wasm" = $version' package.json > package.json.tmp
          mv package.json.tmp package.json

          # Verify the final package.json
          echo "📋 Final library package.json for npm:"
          cat package.json | jq '.'

          echo "✅ Updated library package.json version:"
          jq -r '.version' package.json

      - name: 🔍 Verify library package contents for npm
        run: |
          cd packages/lib
          echo "📋 Final library package contents:"
          ls -la
          echo "📋 Dist contents:"
          ls -la dist/
          echo "📋 Package.json version:"
          node -p "require('./package.json').version"

          # npm pack のドライラン
          npm pack --dry-run

      - name: 🚀 Publish library to npm
        run: |
          cd packages/lib
          if [ "${{ needs.validate.outputs.is_prerelease }}" = "true" ]; then
            # prepublishOnlyをスキップしてpublish（CI環境では既にビルド・テスト済み）
            npm publish --access public --tag beta --ignore-scripts
            echo "✅ Published library pre-release to npm with 'beta' tag"
          else
            npm publish --access public --ignore-scripts
            echo "✅ Published library stable release to npm"
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  # GitHub Release
  github-release:
    name: 📝 Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate, build, publish-lib-npm]
    if: always() && needs.build.result == 'success'
    permissions:
      contents: write
    timeout-minutes: 10

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: build-artifacts/

      - name: 📝 Generate changelog
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

          if [ -n "$PREV_TAG" ]; then
            echo "## 🚀 Changes since $PREV_TAG" > changelog.md
            echo "" >> changelog.md
            git log $PREV_TAG..HEAD --pretty=format:"- %s" --no-merges >> changelog.md
          else
            echo "## 🚀 Initial Release" > changelog.md
            echo "" >> changelog.md
            echo "First release of @nap5/gnrng-id!" >> changelog.md
          fi

          echo "" >> changelog.md
          echo "## 📦 Installation" >> changelog.md
          echo "### npm" >> changelog.md
          echo "- **Library**: \`npm install @nap5/gnrng-id@$VERSION\`" >> changelog.md
          echo "- **WASM Core**: \`npm install @nap5/gnrng-id-wasm@$VERSION\`" >> changelog.md
          echo "" >> changelog.md
          echo "### JSR (Deno)" >> changelog.md
          echo "- **Library**: \`deno add npm:@nap5/gnrng-id@$VERSION\`" >> changelog.md
          echo "- **WASM Core**: \`deno add npm:@nap5/gnrng-id-wasm@$VERSION\`" >> changelog.md

      - name: 📝 Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.validate.outputs.version }}
          name: Release v${{ needs.validate.outputs.version }}
          body_path: changelog.md
          prerelease: ${{ needs.validate.outputs.is_prerelease == 'true' }}
          files: |
            build-artifacts/lib-dist/*
            build-artifacts/wasm-pkg/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Docker release
  docker-release:
    name: 🐳 Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [validate, build]
    permissions:
      contents: read
      packages: write
    timeout-minutes: 20

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🐳 Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=semver,pattern={{version}},value=v${{ needs.validate.outputs.version }}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🏗️ Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # Release summary
  release-summary:
    name: ✅ Release Summary
    if: always()
    runs-on: ubuntu-latest
    needs:
      [
        validate,
        build,
        publish-wasm-npm,
        publish-lib-npm,
        github-release,
        docker-release,
      ]
    steps:
      - name: 📊 Summary
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          echo "## 🚀 Release Summary: v$VERSION" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "### 📦 Publishing Status" >> $GITHUB_STEP_SUMMARY
          echo "| Package | Target | Status | Link |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|--------|--------|------|" >> $GITHUB_STEP_SUMMARY

          # npm のみの状態を表示
          if [ "${{ needs.publish-wasm-npm.result }}" = "success" ]; then
            echo "| @nap5/gnrng-id-wasm | npm | ✅ Published | [View](https://www.npmjs.com/package/@nap5/gnrng-id-wasm) |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| @nap5/gnrng-id-wasm | npm | ❌ Failed | - |" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.publish-lib-npm.result }}" = "success" ]; then
            echo "| @nap5/gnrng-id | npm | ✅ Published | [View](https://www.npmjs.com/package/@nap5/gnrng-id) |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| @nap5/gnrng-id | npm | ❌ Failed | - |" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Release Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: v$VERSION" >> $GITHUB_STEP_SUMMARY
          echo "- **Pre-release**: ${{ needs.validate.outputs.is_prerelease }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Distribution**: npm only (optimized for WASM)" >> $GITHUB_STEP_SUMMARY
