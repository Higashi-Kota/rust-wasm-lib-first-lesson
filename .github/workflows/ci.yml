name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    paths-ignore:
      - "*.md"
      - "docs/**"
      - ".vscode/**"
  pull_request:
    branches: [main, develop]
    paths-ignore:
      - "*.md"
      - "docs/**"
      - ".vscode/**"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  NODE_VERSION: "22.11.0"
  PNPM_VERSION: "10.11.0"

jobs:
  test-rust:
    name: Rust Tests & WASM Build
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
          targets: wasm32-unknown-unknown

      - name: Verify reproducible build with Cargo.lock
        run: |
          if [ ! -f Cargo.lock ]; then
            echo "ERROR: Cargo.lock not found. This should be committed for applications."
            exit 1
          fi
          cargo check --workspace --locked

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --workspace --all-targets --locked -- -D warnings

      - name: Run Rust tests
        run: cargo test --workspace --verbose --locked

      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      - name: Build WASM package
        run: |
          wasm-pack build packages/crates/gnrng-id --target web --scope nap5 --release

      - name: Upload WASM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wasm-pkg
          path: packages/crates/gnrng-id/pkg/
          retention-days: 1

      - name: Check workspace structure
        run: |
          echo "Rust Workspace members:"
          cargo metadata --format-version 1 | jq -r '.workspace_members[]'
          echo "Built WASM packages:"
          ls -la packages/crates/gnrng-id/pkg/ || echo "No pkg directory found"

  test-frontend:
    name: Frontend Tests & Build
    runs-on: ubuntu-latest
    needs: test-rust
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Download WASM artifacts
        uses: actions/download-artifact@v4
        with:
          name: wasm-pkg
          path: packages/crates/gnrng-id/pkg/

      - name: Verify pnpm-lock.yaml exists
        run: |
          if [ ! -f pnpm-lock.yaml ]; then
            echo "ERROR: pnpm-lock.yaml not found. This should be committed for applications."
            exit 1
          fi

      - name: Install dependencies with frozen lockfile
        run: pnpm install --frozen-lockfile --shamefully-hoist

      - name: Build utils package
        run: pnpm --filter @internal/utils build

      - name: Build library package
        run: pnpm --filter @nap5/gnrng-id run build:ci

      - name: TypeScript type check
        run: pnpm run typecheck

      - name: Code quality check
        run: pnpm run check:ts

      - name: Run utils tests
        run: pnpm --filter @internal/utils test:run

      - name: Run library tests
        run: pnpm --filter @nap5/gnrng-id test:run

      - name: Run app tests
        run: pnpm --filter app test:run

      - name: Run benchmark tests
        run: pnpm --filter @nap5/gnrng-id benchmark

      - name: Build frontend
        run: pnpm --filter app build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: packages/app/dist/
          retention-days: 7

  package-check:
    name: Package & Publish Check
    runs-on: ubuntu-latest
    needs: [test-rust, test-frontend]
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: "https://registry.npmjs.org"

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Download WASM artifacts
        uses: actions/download-artifact@v4
        with:
          name: wasm-pkg
          path: packages/crates/gnrng-id/pkg/

      - name: Install dependencies
        run: pnpm install --frozen-lockfile --shamefully-hoist

      - name: Build packages
        run: |
          pnpm --filter @internal/utils build
          pnpm --filter @nap5/gnrng-id build:ci

      - name: Package check (npm)
        run: |
          cd packages/lib
          npm pack --dry-run
          ls -la dist/

      - name: Package check (JSR)
        run: |
          npx jsr publish --dry-run --config packages/lib/jsr.json

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: [test-rust, test-frontend]
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      # 一旦スキップ
      # - name: Install cargo-audit
      #   run: cargo install cargo-audit

      # - name: Run security audit
      #   run: |
      #     cargo audit

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile --shamefully-hoist

      # 一旦スキップ
      # - name: Run npm audit
      #   run: pnpm audit --audit-level moderate

      - name: Dependency check
        run: |
          pnpm --filter @nap5/gnrng-id run package:check || true

  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test-rust, test-frontend, package-check, security]
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: gnrng-id-demo:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker container
        run: |
          docker run -d --name test-container -p 3000:3000 gnrng-id-demo:test
          sleep 10
          if curl -f http://localhost:3000 > /dev/null 2>&1; then
            echo "✅ Health check passed"
          else
            echo "❌ Health check failed"
            docker logs test-container || true
            exit 1
          fi
          docker stop test-container || true

  workspace-info:
    name: Workspace Information
    runs-on: ubuntu-latest
    needs: [test-rust, test-frontend]
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Display workspace information
        run: |
          echo "## Workspace Structure" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "### Rust Workspace" >> $GITHUB_STEP_SUMMARY
          cargo metadata --format-version 1 | jq -r '.workspace_members[]' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### PNPM Workspace" >> $GITHUB_STEP_SUMMARY
          pnpm list --depth=0 2>/dev/null || echo "PNPM packages will be listed after installation" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

          echo "## Build Information" >> $GITHUB_STEP_SUMMARY
          echo "- Node.js: ${{ env.NODE_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- PNPM: ${{ env.PNPM_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- Rust: \$(rustc --version)" >> $GITHUB_STEP_SUMMARY
          echo "- WASM Target: wasm32-unknown-unknown" >> $GITHUB_STEP_SUMMARY

          echo "## Dependency Verification" >> $GITHUB_STEP_SUMMARY
          echo "- Cargo.lock: $([ -f Cargo.lock ] && echo '✅ Present' || echo '❌ Missing')" >> $GITHUB_STEP_SUMMARY
          echo "- pnpm-lock.yaml: $([ -f pnpm-lock.yaml ] && echo '✅ Present' || echo '❌ Missing')" >> $GITHUB_STEP_SUMMARY
